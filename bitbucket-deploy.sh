#!/bin/bash
#
# Generated on https://argbash.io/generate
#
# ARG_POSITIONAL_SINGLE([run],[to run the script],[])
# ARG_OPTIONAL_SINGLE([repo],[r],[optional argument help msg])
# ARG_OPTIONAL_SINGLE([commit],[c],[optional argument help msg])
# ARG_OPTIONAL_SINGLE([owner],[o],[optional argument help msg])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.3.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_repo=
_arg_commit=
_arg_owner=

print_help ()
{
	echo "The general script's help msg"
	printf 'Usage: %s [-r|--repo <arg>] [-c|--commit <arg>] [-o|--owner <arg>] [-h|--help] <run>\n' "$0"
	printf "\t%s\n" "<run>: to run the script"
	printf "\t%s\n" "-r,--repo: optional argument help msg (no default)"
	printf "\t%s\n" "-c,--commit: optional argument help msg (no default)"
	printf "\t%s\n" "-o,--owner: optional argument help msg (no default)"
	printf "\t%s\n" "-h,--help: Prints help"
}

# THE PARSING ITSELF
while test $# -gt 0
do
	_key="$1"
	case "$_key" in
		-r|--repo|--repo=*)
			_val="${_key##--repo=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_repo="$_val"
			;;
		-c|--commit|--commit=*)
			_val="${_key##--commit=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_commit="$_val"
			;;
		-o|--owner|--owner=*)
			_val="${_key##--owner=}"
			if test "$_val" = "$_key"
			then
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_val="$2"
				shift
			fi
			_arg_owner="$_val"
			;;
		-h|--help)
			print_help
			exit 0
			;;
		*)
			_positionals+=("$1")
			;;
	esac
	shift
done

_positional_names=('_arg_run' )
test ${#_positionals[@]} -lt 1 && _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1, but got only ${#_positionals[@]}." 1
test ${#_positionals[@]} -gt 1 && _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1, but got ${#_positionals[@]} (the last one was: '${_positionals[*]: -1}')." 1
for (( ii = 0; ii < ${#_positionals[@]}; ii++))
do
	eval "${_positional_names[ii]}=\${_positionals[ii]}" || die "Error during argument parsing, possibly an Argbash bug." 1
done

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


mkdir ~/$_arg_repo
COMMIT=$(echo "$_arg_commit" | cut -c 1-7)
mkdir ~/$_arg_repo/$COMMIT
cd ~/$_arg_repo/$COMMIT
git clone git@bitbucket.org:$_arg_owner/$_arg_repo.git .
cd deploy
make deploy

# ] <-- needed because of Argbash
